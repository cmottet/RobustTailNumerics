1+!
1
install.packages("devtools")
x = seq(0,15,by = 0.01)
plot(x, (sin(x)/x)^2)
plot(x, (sin(x)/x)^2,type = "l")
plot(x, (sin2*x)/sin(x),type = "l")
plot(x,(sin(2*x)/sin(x),type = "l")
plot(x,sin(2*x)/sin(x),type = "l")
plot(x,sin(3*x)/sin(x),type = "l")
plot(x,sin(4*x)/sin(x),type = "l")
plot(x,sin(5*x)/sin(x),type = "l")
plot(x,sin(6*x)/sin(x),type = "l")
plot(x,(sin(6*x)/sin(x))^2,type = "l")
14/9
6/4
a = as.matrix(c(1,1,1,1,2,2,1,2,3))
a
a = as.matrix(c(1,1,1,1,2,2,1,2,3),ncol = 3)
a
a = as.matrix(c(1,1,1,1,2,2,1,2,3),ncol = 3, nrow = 3)
a
a = matrix(c(1,1,1,1,2,2,1,2,3),ncol = 3, nrow = 3)
a
solve(a)
x = seq(0,30,by = 0.01)
plot(x, exp(-x)*x^3)
plot(x, exp(-x)*x^3,type = "l")
f <- function(x, b){
1/(b*x) + sin(b*x)/(bx)^4
}
x = seq(1,100,by = 0.01)
plot(x,f(x,1))
f <- function(x, b){
1/(b*x) + sin(b*x)/(b*x)^4
}
plot(x,f(x,1))
plot(x,f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,1),type = "l")
f <- function(x, b){
1/(b*x)^3 + sin(b*x)/(b*x)^4
}
x = seq(1,10,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,5,by = 0.01); plot(x,f(x,1),type = "l")
f <- function(x, b){
1/(b*x)^3 + sin(b*x)^2/(b*x)^4
}
x = seq(1,5,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,1),type = "l")
f <- function(x, b){
1/(9*(b*x)^3) + sin(b*x)^2/(b*x)^4
}
x = seq(1,2,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,5),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,100),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,20),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5)/f(x),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(1,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(100,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(5000,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(500,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(500,1000,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
lines(x,1/9/x^3)
1/5
1/5^3
x = seq(1,1000,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
x = seq(0,10,by = 0.01)
plot(x, sin(epx(x)))
plot(x, sin(exp(x)))
plot(x, sin(exp(x)),type = "l")
plot(x, sin(log(x)),type = "l")
plot(x, sin^2(x),type = "l")
plot(x, sin(x)^2,type = "l")
x = seq(0,10,by = 0.01)
plot(x, log(x)/x^1)
x = seq(0,100)
plot(x,x/sin(x))
plot(x,x/sin(x),type = "l")
x = seq(0,1000)
plot(x,x/sin(x),type = "l")
plot(x,x*sin(x),type = "l")
plot(x,1/(x*sin(x)),type = "l")
log(1400)
remove(list = ls())
library(svglite)
library(plyr)
library(dplyr)
library(ggplot2)
# Load Danish insurance fire data
load("data/datafireinsurance.RData")
sample <- as.numeric(sample$Loss.in.DKM)
amax <- sort(sample)[length(sample) -15]
setwd("~/Projects/R/RobustTailNumerics/")
remove(list = ls())
library(svglite)
library(plyr)
library(dplyr)
library(ggplot2)
load("data/datafireinsurance.RData")
sample <- as.numeric(sample$Loss.in.DKM)
amax <- sort(sample)[length(sample) -15]
a <- seq(1, amax, length = 50)
CI <- RobustTail::getCIMomentAndDerivatives(sample,
a,
m = 0,
d= 1:2,
nboot = 1E3,
alpha = 0.05,
bootSample = TRUE,
mc.cores = 1) # Increase the number of cores to use parallel computing
load("data/datafireinsuranceCI.RData")
dataPlot <- NULL
for (i in 1:length(CI))
{
bootSample <- CI[[i]]$bootSample
newDataPlot <- data.frame(a =  CI[[i]]$a,
parameter = rep(c("Density derivative function", "Density function", "Tail distribution function"),3),
value =  as.numeric(c(CI[[i]]$hyperrectangle[1,], CI[[i]]$hyperrectangle[2,], as.numeric(apply(bootSample,2,mean)))),
group = rep(c("lB", "uB", "Fhat"),each  = 3),
type = c(rep("Boostrap 95% CI", 6),rep("Boostraped estimated function", 3) ))
dataPlot <- rbind(dataPlot, newDataPlot)
}
bitmap("pics/FitKEFire.tiff",res = 300, width = 5,height = 5)
plot<-ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(1, 0))
dev.off()
ggsave(plot,file = "pics/Figure14_FitKEFire.svg", width = 5,height = 5,dpi=300)
ggsave(plot,file = "pics/Figure14_FitKEFire.pdf", width = 5,height = 5,dpi=300)
plot<-ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(1, 0))
plot
ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(2, 0))
ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(1, 0))
ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(0.5, 0))
bitmap("pics/FitKEFire.tiff",res = 300, width = 5,height = 5)
plot<-ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(0.5, 0))
dev.off()
# The command below only works for Mac OS X systems
# It converts to a png format without loss
# system("sips -s format png pics/FitKEFire.tiff --out pics/FitKEFire.png")
ggsave(plot,file = "pics/Figure14_FitKEFire.svg", width = 5,height = 5,dpi=300)
ggsave(plot,file = "pics/Figure14_FitKEFire.pdf", width = 5,height = 5,dpi=300)
bitmap("pics/FitKEFire.tiff",res = 300, width = 5,height = 5)
plot<-ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(0.75, 0))
dev.off()
# The command below only works for Mac OS X systems
# It converts to a png format without loss
# system("sips -s format png pics/FitKEFire.tiff --out pics/FitKEFire.png")
ggsave(plot,file = "pics/Figure14_FitKEFire.svg", width = 5,height = 5,dpi=300)
ggsave(plot,file = "pics/Figure14_FitKEFire.pdf", width = 5,height = 5,dpi=300)
dataPlot <- NULL
for (i in 1:length(CI))
{
bootSample <- CI[[i]]$bootSample
newDataPlot <- data.frame(a =  CI[[i]]$a,
parameter = rep(c("Density derivative function", "Density function", "Tail distribution function"),3),
value =  as.numeric(c(CI[[i]]$hyperrectangle[1,], CI[[i]]$hyperrectangle[2,], as.numeric(apply(bootSample,2,mean)))),
group = rep(c("lB", "uB", "Fhat"),each  = 3),
type = c(rep("Boostrap 95% CI", 6),rep("Boostrap-estimated function", 3) ))
dataPlot <- rbind(dataPlot, newDataPlot)
}
###
### Plot
###
bitmap("pics/FitKEFire.tiff",res = 300, width = 5,height = 5)
plot<-ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(7/8, 1/8), legend.justification = c(0.75, 0))
dev.off()
# The command below only works for Mac OS X systems
# It converts to a png format without loss
# system("sips -s format png pics/FitKEFire.tiff --out pics/FitKEFire.png")
ggsave(plot,file = "pics/Figure14_FitKEFire.svg", width = 5,height = 5,dpi=300)
ggsave(plot,file = "pics/Figure14_FitKEFire.pdf", width = 5,height = 5,dpi=300)
40*40*12
